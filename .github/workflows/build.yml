name: Build

on:
  workflow_call:
    inputs:
      build-version:
        required: false
        type: string

permissions:
  contents: read

jobs:
  build:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v2.0.0
      with:
        msbuild-architecture: x64
        vs-version: 17.7.6
    - name: Add VSTest.Console to PATH
      working-directory: ${{env.SOLUTION_FILE_PATH}}
      run: |
        $vstest_parent_path = (.github/workflows/find-vstest-path.ps1)
        if ($vstest_parent_path -eq "")
        {
          throw "Failed to find the parent path of VSTest.Console."
        }
        echo $vstest_parent_path
        Add-Content $env:GITHUB_PATH $vstest_parent_path
    # We use a local subset of SHV SDK, where only `ScriptHookV.lib` and `main.h` are included out of the SDK because
    # these files are necessary to build SHVDN.
    - name: Define SHVDN version
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: |
        $CustomBuildVersionInput = "${{inputs.build-version}}"
        if ($CustomBuildVersionInput -ne "")
        {
          $env:SHVDN_VERSION = echo "$($CustomBuildVersionInput)"
        }
        else
        {
          $VerInputAsFallback = ""
          $currentRefIsVersionTag = $env:GITHUB_REF -match '^refs/tags/v([0-9]+\.[0-9]+\.[0-9]+)'
          if ($currentRefIsVersionTag) {
            $VerInputAsFallback = $matches[1]
          }

          if ($VerInputAsFallback -eq "")
          {
            git fetch --unshallow 2>&1 | Out-Null
            $env:SHVDN_VERSION = echo "$(git for-each-ref --sort=-creatordate --count 1 --format="%(refname:short)" refs/tags |% { $_.Substring(1) })"
          }
          else
          {
            $env:SHVDN_VERSION = "$($VerInputAsFallback)"
          }
        }
          
        echo "Version: v$($env:SHVDN_VERSION)"
        echo "SHVDN_VERSION=$($env:SHVDN_VERSION)" >> $env:GITHUB_ENV
    - name: Restore NuGet packages
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: nuget restore ${{env.SOLUTION_FILE_PATH}}
    - name: Build solution and put misc files for packing
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: |
        msbuild /m /p:configuration=Release /p:platform=x64 ScriptHookVDotNet.sln `
        && del bin\Release\ScriptHookVDotNet*.metagen
    - name: Run tests
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: |
        # Set verbosity to `minimal` so only failed tests would print (set to `normal` by default in VSTest.Console)
        vstest.console "source\scripting_v3_tests\bin\x64\Release\net48\ScriptHookVDotNet_APIv3_Tests.dll" "/logger:console;verbosity=minimal"
    - name: Put misc files for packing
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: |
        $robocopy_process = Start-Process "robocopy" -ArgumentList ". bin\Release README.md ScriptHookVDotNet.ini LICENSE.txt COPYRIGHT.md THIRD-PARTY-NOTICES.md" -PassThru -Wait
        if ($robocopy_process.ExitCode -ne 1) { exit 1 }
        cd bin\Release `
        && Get-ChildItem -File -Filter *.md | Rename-Item -NewName { $_.Name -replace '.md','.txt' }

        mkdir "Docs","Licenses"
        $shvdn_xml_docs_arg = (Get-ChildItem -File -Path "./" | Where-Object { $_.Name -match "^ScriptHookVDotNet[0-9]{1,2}.xml`$" } | ForEach-Object { $_.Name }) -join " "
        $robocopy_process = Start-Process "robocopy" -ArgumentList ". Docs ${shvdn_xml_docs_arg} /move" -PassThru -Wait
        if ($robocopy_process.ExitCode -ne 1) { exit 1 }
        $robocopy_process = Start-Process "robocopy" -ArgumentList ". Licenses LICENSE.txt COPYRIGHT.txt THIRD-PARTY-NOTICES.txt /move" -PassThru -Wait
        if ($robocopy_process.ExitCode -ne 1) { exit 1 }

        cd ..\..\
    - name: Upload artifact
      uses: actions/upload-artifact@v4.4.0
      with:
        name: ScriptHookVDotNet
        path: bin/Release/*
